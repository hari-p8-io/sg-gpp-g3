name: Fast Request Handler Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'fast-requesthandler-service/**'
      - '.github/workflows/fast-requesthandler-service.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'fast-requesthandler-service/**'
      - '.github/workflows/fast-requesthandler-service.yml'

env:
  SERVICE_NAME: fast-requesthandler-service
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: gppg3/fast-requesthandler-service

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Cloud Spanner Emulator
      spanner-emulator:
        image: gcr.io/cloud-spanner-emulator/emulator:latest
        ports:
          - 9010:9010
          - 9020:9020
        options: >-
          --health-cmd "curl -f http://localhost:9020 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

      # Kafka with Zookeeper
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: confluentinc/cp-kafka:7.4.0
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ env.SERVICE_NAME }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm ci

      - name: Generate Protocol Buffers
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run proto:generate

      - name: Run linting
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run lint

      - name: Build TypeScript
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run build

      - name: Run unit tests
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm test

      - name: Wait for Kafka to be ready
        run: |
          timeout 60 bash -c 'until docker exec $(docker ps -q --filter "ancestor=confluentinc/cp-kafka:7.4.0") kafka-topics --bootstrap-server localhost:9092 --list; do sleep 5; done'

      - name: Create Kafka topics
        run: |
          docker exec $(docker ps -q --filter "ancestor=confluentinc/cp-kafka:7.4.0") kafka-topics --create --topic pacs-response-messages --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 || true
          docker exec $(docker ps -q --filter "ancestor=confluentinc/cp-kafka:7.4.0") kafka-topics --create --topic pacs-messages --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 || true

      - name: Setup database
        working-directory: ${{ env.SERVICE_NAME }}
        run: |
          # Wait for Spanner emulator to be ready
          timeout 60 bash -c 'until curl -f http://localhost:9020; do sleep 5; done'
          npm run db:setup
        env:
          SPANNER_EMULATOR_HOST: localhost:9010
          SPANNER_PROJECT_ID: test-project
          SPANNER_INSTANCE_ID: test-instance
          SPANNER_DATABASE_ID: test-database

      - name: Start service in background
        working-directory: ${{ env.SERVICE_NAME }}
        run: |
          npm run dev &
          SERVICE_PID=$!
          echo "SERVICE_PID=$SERVICE_PID" >> $GITHUB_ENV
          # Wait for service to start
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        env:
          NODE_ENV: test
          PORT: 3001
          GRPC_PORT: 50051
          SPANNER_EMULATOR_HOST: localhost:9010
          SPANNER_PROJECT_ID: test-project
          SPANNER_INSTANCE_ID: test-instance
          SPANNER_DATABASE_ID: test-database
          KAFKA_BROKERS: localhost:9092

      - name: Install Playwright browsers
        working-directory: ${{ env.SERVICE_NAME }}
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run test:e2e
        env:
          NODE_ENV: test
          SPANNER_EMULATOR_HOST: localhost:9010
          SPANNER_PROJECT_ID: test-project
          SPANNER_INSTANCE_ID: test-instance
          SPANNER_DATABASE_ID: test-database
          KAFKA_BROKERS: localhost:9092
          SERVICE_URL: http://localhost:3001
          GRPC_URL: localhost:50051

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ env.SERVICE_NAME }}
          path: ${{ env.SERVICE_NAME }}/playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ env.SERVICE_NAME }}
          path: ${{ env.SERVICE_NAME }}/test-results/
          retention-days: 30

      - name: Stop service
        if: always()
        run: |
          if [ ! -z "$SERVICE_PID" ]; then
            kill $SERVICE_PID || true
          fi

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.SERVICE_NAME }}
          file: ./${{ env.SERVICE_NAME }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifact
        run: |
          mkdir -p deployment
          cat > deployment/docker-compose.yml << EOF
          version: '3.8'
          services:
            ${{ env.SERVICE_NAME }}:
              image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
              ports:
                - "3001:3001"
                - "50051:50051"
              environment:
                - NODE_ENV=production
                - PORT=3001
                - GRPC_PORT=50051
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
          EOF

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ env.SERVICE_NAME }}
          path: deployment/
          retention-days: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ env.SERVICE_NAME }}
          path: deployment/

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests with built image
        run: |
          cd deployment
          docker-compose up -d
          
          # Wait for service to be healthy
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          
          # Run basic smoke tests
          echo "Running smoke tests..."
          curl -f http://localhost:3001/health || exit 1
          
          # Cleanup
          docker-compose down -v
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ env.SERVICE_NAME }} to staging environment"
          echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your staging deployment logic here

  deploy-production:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ env.SERVICE_NAME }} to production environment"
          echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your production deployment logic here 